{"ts":1349986431700,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1349986433742,"patch":[[{"diffs":[[1,"/* Socket Logic*/\r\n\r\n'use strict';\r\n\r\nmodule.exports = Socket\r\n\r\nfunction Socket (req, res) {\r\n    var sk = this\r\n\tsk.id = +new Date\r\n\tsk.path = req.url\r\n\tsk._req = req\r\n\tsk._res = res\r\n\tsk._isClosed = false\r\n\tsk._res.statusCode = 200\r\n\tsk._heartBeat = void 0\r\n\tsk.heartBeat = 10*1000 // Default 10 secs\r\n\t// As seen on https://github.com/einaros/sse.js/blob/master/lib/sseclient.js\r\n\tsk.isLegacy = req.headers['user-agent'] && (/^Opera[^\\/]*\\/9/).test(req.headers['user-agent']);\r\n\tif (sk.isLegacy) {\r\n    \tsk._res.setHeader('Content-Type', 'text/x-dom-event-stream')\r\n  \t} else sk._res.setHeader('Content-Type', 'text/event-stream')\r\n\r\n  \tsk._req.connection.on('close',function(){\r\n  \t   sk._isClosed = true\r\n       sk.emit.apply(sk, ['close'].concat([].slice.call(arguments)))\r\n    })\r\n  \tsk._res.write(':ok\\n\\n');\r\n}\r\n\r\nSocket.prototype.__proto__ = process.EventEmitter.prototype\r\n\r\nSocket.prototype.mkln = function (ev, str) {\r\n  \tif (!str) str = ev, ev = 'data'\r\n\tstr = str.replace(/(\\r\\n|\\r|\\n)/g, '\\n')\r\n\t\r\n\tvar lns = str.split(/\\n/), buff = '', sk = this\r\n\r\n\tfor (var i = 0, l = lns.length; i < l; ++i) {\r\n\t\tvar line = lns[i];\r\n\t\tbuff += ev + ':' + (sk.isLegacy ? ' ' : '') + line + '\\n'\r\n\t}\r\n\treturn buff\r\n}\r\n\r\nSocket.prototype.write = function (str) {\r\n\tif (this._isClosed) return\r\n\tthis._res.write(this.mkln(str))\r\n}\r\nSocket.prototype.end = function (str) {\r\n\tif (this._isClosed) return\r\n\tif (!str) return this._res.write('\\n')\r\n\tthis._res.write(this.mkln(str))\r\n\tthis._res.write('\\n')\r\n}\r\nSocket.prototype.raw  = function (str){\r\n\tif (this._isClosed) return\r\n\tthis._res.write(str)\r\n}\r\nSocket.prototype.json = function (json) {\r\n\tif (this._isClosed) return\r\n\t// this is a expected behaviour\r\n\tthis.end(JSON.stringify(json))\r\n}\r\n\r\nSocket.prototype.close = function (str) {\r\n\tif (this._isClosed) return\r\n\tthis.emit('close')\r\n\tif (str) return this._res.end(this.mkln(str))\r\n\tthis._res.end()\r\n}\r\n\r\nSocket.prototype.send = function (event, data) {\r\n\tthis.event(event)\r\n\tif (typeof(data) === 'object'){\r\n\t\treturn this.json(JSON.stringify(data))\r\n\t}\r\n\treturn this.end(data)\r\n}\r\n\r\nSocket.prototype.event = function (event) {\r\n\tif (this._isClosed) return\r\n\tthis._res.write(this.mkln('event', event))\r\n}\r\nSocket.createSocket = function (req, res) {\r\n\treturn new Socket(req, res)\r\n}\r\n\r\nSocket.prototype.hbInterval = function () {\r\n\tclearInterval(this._hbInterval)\r\n\tthis._hbInterval = setInterval(function (){\r\n  \t\tthis.send('heartbeat', this.id)\r\n  \t}.bind(this), this._heartBeat)\r\n}\r\n\r\nObject.defineProperty(Socket.prototype, 'heartbeat', {\r\n\tset: function (val){\r\n\t\tthis._heartBeat = val\r\n\t\tthis.hbInterval()\r\n\t},\r\n\tget: function (){\r\n\t\treturn this._heartBeat\r\n\t}\r\n})\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2673}]],"length":2673,"saved":false}
