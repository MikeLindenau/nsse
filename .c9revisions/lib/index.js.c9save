{"ts":1349986396195,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1349986406519,"patch":[[{"diffs":[[1,"/*\r\n  EventSource for node.js\r\n  @author: Alejandro Morales <vamg008@gmail.com>\r\n  @license: MIT 2012\r\n  @date: 10-10-2012\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = EventSource\r\n\r\nvar EventEmitter = require('events').EventEmitter\r\n  , util = require('util')\r\n  , Socket = require('./socket')\r\n  , Channel = require('./channel')\r\n  , slice = Array.prototype.slice\r\n\r\nprocess.EventEmitter = EventEmitter\r\n\r\n\r\nfunction EventSource(server, options) {\r\n    var es = this\r\n\tes._server = server\r\n\tes.sockets = {}\r\n\tes.paths = {}\r\n\tutil._extend(es, options || {})\r\n\tes.oldListeners = es._server.listeners('request')\r\n\tes._server.removeAllListeners('request')\r\n\r\n\tes._server.on('request', function (req, res){\r\n\t\tif (es.paths[req.url]) {\r\n\t\t\treturn es.newConnection(req, res)\r\n\t\t} else {\r\n\t\t \tfor (var i = 0, l = es.oldListeners.length; i < l; ++i) {\r\n\t        \tes.oldListeners[i].call(es._server, req, res);\r\n\t      \t}\r\n\r\n\t\t}\r\n\t})\r\n}\t\r\n\r\n\r\n\r\nEventSource.prototype.__proto__ = EventEmitter.prototype\r\n\r\nEventSource.prototype.newConnection = function (req, res){\r\n\tif (!channel.validate) return this.setupSocket(req, res)\r\n\t\r\n\tvar es = this\r\n\tchannel.validateRequest(req, function (error, data) {\r\n\t\tif (error) {\r\n\t\t\tres.statusCode = 501\r\n\t\t\treturn res.end(error)\r\n\t\t}\r\n\t\tes.setupSocket(req, res, data)\r\n\t})\r\n\t\r\n\r\n}\r\nEventSource.prototype.setupSocket = function (req, res, data){\r\n\tvar es = this\r\n\t  , socket = Socket.createSocket(req, res)\r\n\t  , channel = es.paths[req.url]\r\n\r\n\r\n\tif (es.heartbeat) socket.heartbeat = Number(es.heartbeat)\r\n\tif (data) socket.data = data;\r\n\r\n\t++channel.members\r\n\r\n\t\r\n\tchannel.emit('connection', socket);\t\r\n\tchannel.sockets[socket.id] = socket\r\n\tsocket.once('close', function (){\r\n\t\t--channel.members;\r\n\t\tdelete channel.sockets[socket.id]\r\n\t})\r\n}\r\n\r\n/* using the socket.io api*/\r\n\r\nEventSource.prototype.of = function (path, options) {\r\n\tif (!this.paths[path]) {\r\n\t\tthis.paths[path] = new Channel(path, options)\r\n\t}\r\n\treturn this.paths[path]\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":1977}]],"length":1977,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349986755469,"patch":[[{"diffs":[[1,"/*\r\n  EventSource for node.js\r\n  @author: Alejandro Morales <vamg008@gmail.com>\r\n  @license: MIT 2012\r\n  @date: 10-10-2012\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = EventSource\r\n\r\nvar EventEmitter = require('events').EventEmitter\r\n  , util = require('util')\r\n  , Socket = require('./socket')\r\n  , Channel = require('./channel')\r\n  , slice = Array.prototype.slice\r\n\r\nprocess.EventEmitter = EventEmitter\r\n\r\nutil._extend = util._extend || function (origin, add) {\r\n  // Don't do anything if add isn't an object\r\n  if (!add || typeof add !== 'object') return origin;\r\n\r\n  var keys = Object.keys(add);\r\n  var i = keys.length;\r\n  while (i--) {\r\n    origin[keys[i]] = add[keys[i]];\r\n  }\r\n  return origin;\r\n}\r\n\r\nfunction EventSource(server, options) {\r\n    var es = this\r\n\tes._server = server\r\n\tes.sockets = {}\r\n\tes.paths = {}\r\n\tutil._extend(es, options || {})\r\n\tes.oldListeners = es._server.listeners('request')\r\n\tes._server.removeAllListeners('request')\r\n\r\n\tes._server.on('request', function (req, res){\r\n\t\tif (es.paths[req.url]) {\r\n\t\t\treturn es.newConnection(req, res)\r\n\t\t} else {\r\n\t\t \tfor (var i = 0, l = es.oldListeners.length; i < l; ++i) {\r\n\t        \tes.oldListeners[i].call(es._server, req, res);\r\n\t      \t}\r\n\r\n\t\t}\r\n\t})\r\n}\t\r\n\r\n\r\n\r\nEventSource.prototype.__proto__ = EventEmitter.prototype\r\n\r\nEventSource.prototype.newConnection = function (req, res){\r\n\tif (!channel.validate) return this.setupSocket(req, res)\r\n\t\r\n\tvar es = this\r\n\tchannel.validateRequest(req, function (error, data) {\r\n\t\tif (error) {\r\n\t\t\tres.statusCode = 501\r\n\t\t\treturn res.end(error)\r\n\t\t}\r\n\t\tes.setupSocket(req, res, data)\r\n\t})\r\n\t\r\n\r\n}\r\nEventSource.prototype.setupSocket = function (req, res, data){\r\n\tvar es = this\r\n\t  , socket = Socket.createSocket(req, res)\r\n\t  , channel = es.paths[req.url]\r\n\r\n\r\n\tif (es.heartbeat) socket.heartbeat = Number(es.heartbeat)\r\n\tif (data) socket.data = data;\r\n\r\n\t++channel.members\r\n\r\n\t\r\n\tchannel.emit('connection', socket);\t\r\n\tchannel.sockets[socket.id] = socket\r\n\tsocket.once('close', function (){\r\n\t\t--channel.members;\r\n\t\tdelete channel.sockets[socket.id]\r\n\t})\r\n}\r\n\r\n/* using the socket.io api*/\r\n\r\nEventSource.prototype.of = function (path, options) {\r\n\tif (!this.paths[path]) {\r\n\t\tthis.paths[path] = new Channel(path, options)\r\n\t}\r\n\treturn this.paths[path]\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2274}]],"length":2274,"saved":false}
